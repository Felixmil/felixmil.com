{
  "hash": "1ba1dba69e7c1107de2aa951112f8bd0",
  "result": {
    "markdown": "---\ntitle: \"Advent of Code - Day 9: Rope Bridge\"\nsubtitle: \"9h day of the advent of code using R\"\ndate: 2022-12-09\ncategories: \"advent of code\"\nformat: \n   html:\n     df-print: paged\neditor: \n  markdown: \n    wrap: 80\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\n# Part 1\n\n\n## Input\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample <-   readLines(\"sample.txt\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ninput <- readLines(\"input.txt\")\n\nhead(input, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"U 2\" \"D 2\" \"R 2\" \"U 2\" \"D 1\" \"L 2\" \"R 2\" \"D 1\" \"R 2\" \"D 1\"\n```\n:::\n:::\n\n\n# Part 1\n\n\n## Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmove_knot <- function(head_coord, knot_coord) {\n  \n  # if the head and tail aren't touching and aren't in the same row or column\n  if (abs(head_coord$x - knot_coord$x) >  1 | abs(head_coord$y - knot_coord$y) > 1) {\n    available_coord <- list(\n      list(x = knot_coord$x + 1, y = knot_coord$y),\n      list(x = knot_coord$x + 1, y = knot_coord$y + 1),\n      list(x = knot_coord$x + 1, y = knot_coord$y - 1),\n      list(x = knot_coord$x - 1, y = knot_coord$y),\n      list(x = knot_coord$x - 1, y = knot_coord$y + 1),\n      list(x = knot_coord$x - 1, y = knot_coord$y - 1),\n      list(x = knot_coord$x, y = knot_coord$y + 1),\n      list(x = knot_coord$x, y = knot_coord$y - 1),\n      list(x = knot_coord$x, y = knot_coord$y)\n    )\n    \n    # Coordinate difference are computed between head and all possible future\n    # knot position\n    coord_diff <- unlist(\n      purrr::map(available_coord,\n                 ~ abs(.x$x - head_coord$x) + abs(.x$y - head_coord$y)))\n    \n    \n    # new knot coordinate is the one with lowest difference\n    knot_coord <- available_coord[[which(coord_diff == min(coord_diff))]]\n  }\n  return(knot_coord)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead_coord <- list(x=0,y=0)\ntail_coord <- list(x=0,y=0)\n\nvisited_coord <- c()\n\nfor (move in input) {\n  \n  move_vec <- unlist(strsplit(move, \" \"))\n  \n  direction <- move_vec[1]\n  distance <- move_vec[2]\n  \n  for (d in 1:distance) {\n    # message(d)\n    if (direction == \"R\") {\n      head_coord$x <- head_coord$x + 1\n    } else if (direction == \"L\"){\n      head_coord$x = head_coord$x - 1\n    } else if (direction == \"U\") {\n      head_coord$y = head_coord$y + 1\n    } else if (direction == \"D\") {\n      head_coord$y = head_coord$y - 1\n    }\n    \n    tail_coord <- move_knot(head_coord = head_coord, knot_coord = tail_coord)\n    \n    visited_coord <- c(visited_coord, paste(tail_coord$x, tail_coord$y, sep =  \";\"))\n  }\n}\n```\n:::\n\n\n\n## Result\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(unique(visited_coord))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6337\n```\n:::\n:::\n\n\n# Part 2\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknots <- list()\n\nfor (i in 1:10) {\n  knots[[i]] <- list(x=0, y=0)\n}\n\n\nvisited_coord <- c()\n\nfor (move in input) {\n  \n  move_vec <- unlist(strsplit(move, \" \"))\n  \n  direction <- move_vec[1]\n  distance <- move_vec[2]\n  \n  for (d in 1:distance) {\n    if (direction == \"R\") {\n      knots[[1]]$x <- knots[[1]]$x + 1\n    } else if (direction == \"L\"){\n      knots[[1]]$x = knots[[1]]$x - 1\n    } else if (direction == \"U\") {\n      knots[[1]]$y = knots[[1]]$y + 1\n    } else if (direction == \"D\") {\n      knots[[1]]$y = knots[[1]]$y - 1\n    }\n    for (i in 1:9) {\n      new_coord <- move_knot(knots[[i]], knots[[i+1]])\n      if (new_coord$x != knots[[i+1]]$x | new_coord$y != knots[[i+1]]$y) {\n        knots[[i+1]] <- new_coord\n      } else{\n        break\n      }\n      \n    }\n    visited_coord <- c(visited_coord, paste(knots[[10]]$x, knots[[10]]$y,sep = \";\"))\n  }\n  \n}\n```\n:::\n\n\n## Result\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(unique(visited_coord))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2455\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}